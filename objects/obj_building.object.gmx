<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_building</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAXDOORS = 10

currPos = 0
for(i = 0; i &lt; MAXDOORS; i++)
{
    door[i] = currPos + ceil(random(10))
    currPos += door[i]
}

obj_health = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = -(x - x2)/TILESIZE

if image_xscale &lt; 0
    image_xscale = min(-1,floor(image_xscale))
else
    image_xscale = max(1,ceil(image_xscale))

image_yscale = max(1,ceil((y - y2)/TILESIZE))

if obj_health &lt;= 0
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_healthbar(x,y-image_yscale*TILESIZE - 10, x+100, y-image_yscale*TILESIZE - 20,obj_health,c_red,c_green,c_green,0,true,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(image_blend)
if image_xscale &gt; 0 //if left side, flip
    draw_rectangle(x,y,x+image_xscale*TILESIZE,y-(image_yscale*TILESIZE),false)
else
    draw_rectangle(x+TILESIZE,y,x+image_xscale*TILESIZE+TILESIZE,y-(image_yscale*TILESIZE),false)

for(yy = 0; yy &lt; image_yscale; yy++)
{
        for(xx = 0; xx &lt; abs(image_xscale); xx++)
        {
            random_set_seed(xx + yy*image_xscale)
            tileX = x+abs(image_xscale)/image_xscale*xx*TILESIZE
            tileY = y-yy*TILESIZE
            tileSprite = calcTileSprite()
            tileIndex = random(3)//image_index
            if (xx = 0 and image_xscale &gt; 0) or (xx &gt; abs(image_xscale)-2 and image_xscale &lt; 0) //if left side, flip
                draw_sprite_ext(tileSprite,tileIndex,tileX+TILESIZE,tileY,-1,1,image_alpha,c_white,image_alpha)
            else
                draw_sprite_ext(tileSprite,tileIndex,tileX,tileY,1,1,image_alpha,c_white,image_alpha)
        }
}
randomize()


//debuggin
/*draw_set_color(c_black)
draw_text(10,10,"y: " + string(y) + " x: " + string(y))
draw_text(10,40,"yscale: " + string(image_yscale))
draw_text(10,70,"xscale: " + string(image_xscale))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
